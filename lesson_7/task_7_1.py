# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный
# случайными числами на промежутке [-100; 100). Выведите на экран исходный и
# отсортированный массивы. Сортировка должна быть реализована в виде функции. По
# возможности доработайте алгоритм (сделайте его умнее).
# ---------------------------------------------------------------------------------------------------------------------
# Проблема алгоритма сортировки пузырьком заключается в том, что цикл выдвижения наибольшего числа может не выполнить
# ни одной перестановки. Это будет означать, что массив уже отсортирован. Но алгоритм не учитывает этот факт и
# продолжает работу, устанавливая самые большие элементы в конец анализируемого подмассива – хотя они уже стоят на
# своих местах.
# Решить данную проблему довольно легко, просто добавив перед внутренним циклом флаг перестановок replace_flag.
from random import randint


def bubble_sort(array_to_sort):
    numbers = array_to_sort
    n = 1
    while n < len(numbers):
        # Сделаем флаг перестановок replace_flag и присвоим ему значение False.
        replace_flag = False
        for i in range(len(numbers) - n):
            # Если условие проверки выполнилось, значит перестановка во внутреннем цикле будет.
            if numbers[i] < numbers[i + 1]:
                # В этом случае нам единожды необходимо присвоить replace_flag значение True.
                if not replace_flag:
                    replace_flag = True
                numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]
        # Проверяем значение флага replace_flag после выхода из внутреннего цикла.
        # Если значение флага осталось False, значит перестановок во внутреннем цикле не было.
        # А это в свою очередь означает, что массив уже отсортирован.
        # В таком случае в продолжении цикла while нет смысла и он прерывается.
        if not replace_flag:
            break
        n += 1
    return numbers


if __name__ == '__main__':
    my_array = [randint(-100, 100) for _ in range(20)]
    print(my_array)
    print(bubble_sort(my_array))
